services:
  master_db:
    image: postgres:latest
    container_name: master_db
    environment:
      POSTGRES_USER: master_user
      POSTGRES_PASSWORD: master_password
      POSTGRES_DB: inventory_db
    volumes:
      - master_data:/var/lib/postgresql/data
      - ./database/init/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./database/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command: postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U master_user -d inventory_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "5432:5432"
    networks:
      - system

  slave_db:
    image: postgres:latest
    container_name: slave_db
    environment:
      # POSTGRES_USER: slave_user
      POSTGRES_PASSWORD: slave_password
      # POSTGRES_DB: inventory_db
    volumes:
      - slave_data:/var/lib/postgresql/data
      - ./database/config/setup.sh:/docker-entrypoint-initdb.d/setup.sh
    command: bash -c "chmod +x /docker-entrypoint-initdb.d/setup.sh && /docker-entrypoint-initdb.d/setup.sh"
    depends_on:
      master_db:
        condition: service_healthy
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U master_user -d inventory_db"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - system

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    networks:
      - system

  server1:
    container_name: server1
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: ./server/.env
    ports:
      - "3001:3001"
    depends_on:
      master_db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - system

  server2:
    container_name: server2
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: ./server/.env
    ports:
      - "3002:3001"
    networks:
      - system

  server3:
    container_name: server3
    build:
      context: ./server
      dockerfile: Dockerfile
    env_file: ./server/.env
    ports:
      - "3003:3001"
    networks:
      - system

  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "4200:80"
    networks:
      - system

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - server1
      - server2
      - server3
      - client
    networks:
      - system

volumes:
  master_data:
  slave_data:

networks:
  system:
    driver: bridge
